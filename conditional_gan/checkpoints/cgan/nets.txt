CINResnetGenerator(
  (model): TwoInputSequential(
    (0): ReflectionPad2d((3, 3, 3, 3))
    (1): Conv2d(3, 8, kernel_size=(7, 7), stride=(1, 1))
    (2): CondInstanceNorm(
      (shift_conv): Sequential(
        (0): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
      (scale_conv): Sequential(
        (0): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
    )
    (3): ReLU(inplace)
    (4): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): CondInstanceNorm(
      (shift_conv): Sequential(
        (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
      (scale_conv): Sequential(
        (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
    )
    (6): ReLU(inplace)
    (7): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (8): CondInstanceNorm(
      (shift_conv): Sequential(
        (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
      (scale_conv): Sequential(
        (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
    )
    (9): ReLU(inplace)
    (10): CINResnetBlock(
      (conv_block): TwoInputSequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): MergeModule(
          (module1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
          (module2): CondInstanceNorm(
            (shift_conv): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
            )
            (scale_conv): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
            )
          )
        )
        (2): ReLU(inplace)
        (3): ReflectionPad2d((1, 1, 1, 1))
        (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (5): InstanceNorm()
      )
      (relu): ReLU(inplace)
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): MergeModule(
        (module1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (module2): CondInstanceNorm(
          (shift_conv): Sequential(
            (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
          )
          (scale_conv): Sequential(
            (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
          )
        )
      )
      (2): ReLU(inplace)
      (3): ReflectionPad2d((1, 1, 1, 1))
      (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (5): InstanceNorm()
    )
    (11): CINResnetBlock(
      (conv_block): TwoInputSequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): MergeModule(
          (module1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
          (module2): CondInstanceNorm(
            (shift_conv): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
            )
            (scale_conv): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
            )
          )
        )
        (2): ReLU(inplace)
        (3): ReflectionPad2d((1, 1, 1, 1))
        (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (5): InstanceNorm()
      )
      (relu): ReLU(inplace)
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): MergeModule(
        (module1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (module2): CondInstanceNorm(
          (shift_conv): Sequential(
            (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
          )
          (scale_conv): Sequential(
            (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
          )
        )
      )
      (2): ReLU(inplace)
      (3): ReflectionPad2d((1, 1, 1, 1))
      (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (5): InstanceNorm()
    )
    (12): CINResnetBlock(
      (conv_block): TwoInputSequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): MergeModule(
          (module1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
          (module2): CondInstanceNorm(
            (shift_conv): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
            )
            (scale_conv): Sequential(
              (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
            )
          )
        )
        (2): ReLU(inplace)
        (3): ReflectionPad2d((1, 1, 1, 1))
        (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (5): InstanceNorm()
      )
      (relu): ReLU(inplace)
      (0): ReflectionPad2d((1, 1, 1, 1))
      (1): MergeModule(
        (module1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (module2): CondInstanceNorm(
          (shift_conv): Sequential(
            (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
          )
          (scale_conv): Sequential(
            (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
          )
        )
      )
      (2): ReLU(inplace)
      (3): ReflectionPad2d((1, 1, 1, 1))
      (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
      (5): InstanceNorm()
    )
    (13): ConvTranspose2d(32, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (14): CondInstanceNorm(
      (shift_conv): Sequential(
        (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
      (scale_conv): Sequential(
        (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
    )
    (15): ReLU(inplace)
    (16): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): CondInstanceNorm(
      (shift_conv): Sequential(
        (0): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
      (scale_conv): Sequential(
        (0): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
      )
    )
    (18): ReLU(inplace)
    (19): Conv2d(8, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (20): Tanh()
  )
)
Total number of parameters: 74833
ResnetGenerator(
  (model): Sequential(
    (0): ReflectionPad2d((3, 3, 3, 3))
    (1): Conv2d(1, 8, kernel_size=(7, 7), stride=(1, 1))
    (2): InstanceNorm()
    (3): ReLU(inplace)
    (4): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): InstanceNorm()
    (6): ReLU(inplace)
    (7): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (8): InstanceNorm()
    (9): ReLU(inplace)
    (10): ResnetBlock(
      (conv_block): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (2): ReLU(inplace)
        (3): ReflectionPad2d((1, 1, 1, 1))
        (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (5): InstanceNorm()
      )
      (relu): ReLU(inplace)
    )
    (11): ResnetBlock(
      (conv_block): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (2): ReLU(inplace)
        (3): ReflectionPad2d((1, 1, 1, 1))
        (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (5): InstanceNorm()
      )
      (relu): ReLU(inplace)
    )
    (12): ResnetBlock(
      (conv_block): Sequential(
        (0): ReflectionPad2d((1, 1, 1, 1))
        (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (2): ReLU(inplace)
        (3): ReflectionPad2d((1, 1, 1, 1))
        (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1))
        (5): InstanceNorm()
      )
      (relu): ReLU(inplace)
    )
    (13): ConvTranspose2d(32, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
    (14): InstanceNorm()
    (15): ReLU(inplace)
    (16): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): InstanceNorm()
    (18): ReLU(inplace)
    (19): Conv2d(8, 3, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
    (20): Tanh()
  )
)
Total number of parameters: 69011
Discriminator_edges(
  (model): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace)
    (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (3): InstanceNorm()
    (4): LeakyReLU(negative_slope=0.2, inplace)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (6): InstanceNorm()
    (7): LeakyReLU(negative_slope=0.2, inplace)
    (8): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (9): InstanceNorm()
    (10): LeakyReLU(negative_slope=0.2, inplace)
    (11): Conv2d(128, 1, kernel_size=(4, 4), stride=(1, 1))
  )
)
Total number of parameters: 243521
Discriminator(
  (model): Sequential(
    (0): Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.2, inplace)
    (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (3): InstanceNorm()
    (4): LeakyReLU(negative_slope=0.2, inplace)
    (5): Conv2d(32, 64, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
    (6): InstanceNorm()
    (7): LeakyReLU(negative_slope=0.2, inplace)
    (8): Conv2d(64, 64, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
    (9): InstanceNorm()
    (10): LeakyReLU(negative_slope=0.2, inplace)
    (11): Conv2d(64, 1, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
  )
)
Total number of parameters: 108273
DiscriminatorLatent(
  (model): Sequential(
    (0): Linear(in_features=16, out_features=16, bias=True)
    (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): LeakyReLU(negative_slope=0.2, inplace)
    (3): Linear(in_features=16, out_features=16, bias=True)
    (4): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): LeakyReLU(negative_slope=0.2, inplace)
    (6): Linear(in_features=16, out_features=16, bias=True)
    (7): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): LeakyReLU(negative_slope=0.2, inplace)
    (9): Linear(in_features=16, out_features=1, bias=True)
  )
)
Total number of parameters: 929
LatentEncoder(
  (conv_modules): Sequential(
    (0): Conv2d(4, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ReLU(inplace)
    (2): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (4): ReLU(inplace)
    (5): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (7): ReLU(inplace)
    (8): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
    (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (10): ReLU(inplace)
    (11): Conv2d(64, 64, kernel_size=(4, 4), stride=(1, 1), bias=False)
    (12): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (13): ReLU(inplace)
  )
  (enc_mu): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
  (enc_logvar): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
)
Total number of parameters: 92456
